/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Tycho Magnetic Anomaly (https://sketchfab.com/Tycho_Magnetic_Anomaly)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/piscean-pearl-8b1ce96101d945b29dbc0dc014d0b5b8
Title: Piscean Pearl
*/
"use client";

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { ThreeElements } from '@react-three/fiber'
import { Group } from 'three'
import * as THREE from 'three'

type CrystallBallProps = ThreeElements['group'] & {
  animationName?: string;
  playing?: boolean;
  speed?: number;
}

export function CrystallBall({ 
  animationName, 
  playing = true, 
  speed = 0.2, 
  ...props 
}: CrystallBallProps) {
  const group = useRef<Group>(null!)
  const { nodes, materials, animations } = useGLTF('/piscean_pearl.glb')
  const { actions } = useAnimations(animations, group)
  
  // Control animation based on props
  useEffect(() => {
    // Log available animations on mount
    console.log("Available animations:", Object.keys(actions))
    
    // If no animations are available, return early
    if (Object.keys(actions).length === 0) return
    
    // Determine which animation to play
    const currentAnimation = animationName && actions[animationName] 
      ? actions[animationName] 
      : actions[Object.keys(actions)[0]]
    
    if (playing && currentAnimation) {
      // Configure and play animation
      currentAnimation.reset().fadeIn(0.5).play()
      currentAnimation.setEffectiveTimeScale(speed)
      currentAnimation.setLoop(THREE.LoopRepeat, Infinity)
    } else if (currentAnimation) {
      // Pause or stop animation
      currentAnimation.fadeOut(0.5)
    }
    
    return () => {
      // Cleanup
      Object.values(actions).forEach(action => action?.stop())
    }
  }, [actions, animationName, playing, speed])
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Sphere_0">
                <mesh
                  name="Object_4"
                  castShadow
                  receiveShadow
                  geometry={(nodes.Object_4 as any).geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere004_1" scale={0.9}>
                <mesh
                  name="Object_6"
                  castShadow
                  receiveShadow
                  geometry={(nodes.Object_6 as any).geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere005_2" scale={1.08}>
                <mesh
                  name="Object_8"
                  castShadow
                  receiveShadow
                  geometry={(nodes.Object_8 as any).geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere002_3" scale={6.5}>
                <mesh
                  name="Object_10"
                  castShadow
                  receiveShadow
                  geometry={(nodes.Object_10 as any).geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere001_4" scale={0.292}>
                <mesh
                  name="Object_12"
                  castShadow
                  receiveShadow
                  geometry={(nodes.Object_12 as any).geometry}
                  material={materials.material_1}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/piscean_pearl.glb')